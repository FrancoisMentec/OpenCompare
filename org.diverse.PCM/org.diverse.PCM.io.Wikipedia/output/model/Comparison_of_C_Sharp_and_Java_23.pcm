
{"class":"pcm.PCM@11950605221426087287662","generated_KMF_ID":"11950605221426087287662","name":"Comparison of C Sharp and Java -  Special feature keywords","products":[
{"class":"pcm.Product@10950940711426087287662","generated_KMF_ID":"10950940711426087287662","name":"","values":[
{"class":"pcm.Cell@13111965071426087287662","content":"C# supports the  keyword. This can occasionally be useful, for example for implementing finite state machine or for generated code, but the use of a more structured method of control flow is usually recommended (see criticism of the goto statement). Java does not support the  statement (but  is a reserved word). However, Java does support labeled  and  statements, which in certain situations can be used when a  statement might otherwise be used.","generated_KMF_ID":"13111965071426087287662","feature":["features[21151265101426087287662]"],"interpretation":[]}
]}
,
{"class":"pcm.Product@9740766161426087287662","generated_KMF_ID":"9740766161426087287662","name":"","values":[
{"class":"pcm.Cell@10378440311426087287662","content":"In C#, the switch statement also operates on strings and longs. Fallthrough is allowed for empty statements and possible via 'goto case' for statements containing code. Java's switch statement does not operate on strings (before Java 7) nor  primitive type but falls through for all statements (excluding those with '').","generated_KMF_ID":"10378440311426087287662","feature":["features[21151265101426087287662]"],"interpretation":[]}
]}
,
{"class":"pcm.Product@5595906711426087287662","generated_KMF_ID":"5595906711426087287662","name":"","values":[
{"class":"pcm.Cell@12095172841426087287662","content":"In C#,  causes the  method (implemented via the  interface) of the object declared to be executed after the code block has run or when an exception is thrown within the code block.In Java SE 7 a similar construct has been added called try-with-resources :","generated_KMF_ID":"12095172841426087287662","feature":["features[21151265101426087287662]"],"interpretation":[]}
]}
,
{"class":"pcm.Product@15867241301426087287662","generated_KMF_ID":"15867241301426087287662","name":"","values":[
{"class":"pcm.Cell@6205244641426087287662","content":"Java uses  to guarantee the results of floating point operations remain the same across platforms.","generated_KMF_ID":"6205244641426087287662","feature":["features[21151265101426087287662]"],"interpretation":[]}
]}
,
{"class":"pcm.Product@19499912821426087287662","generated_KMF_ID":"19499912821426087287662","name":"","values":[
{"class":"pcm.Cell@7555397071426087287662","content":"In C#, the  keyword is a shorthand for synchronizing access to a block of code across threads (using a ), wrapped in a  …  block.","generated_KMF_ID":"7555397071426087287662","feature":["features[21151265101426087287662]"],"interpretation":[]}
]}
,
{"class":"pcm.Product@11824480831426087287662","generated_KMF_ID":"11824480831426087287662","name":"","values":[
{"class":"pcm.Cell@5912616431426087287662","content":"In Java, the  keyword is a shorthand for synchronizing access to a block of code across threads (using a ), wrapped in a  …  block.","generated_KMF_ID":"5912616431426087287662","feature":["features[21151265101426087287662]"],"interpretation":[]}
]}
,
{"class":"pcm.Product@2850508381426087287662","generated_KMF_ID":"2850508381426087287662","name":",","values":[
{"class":"pcm.Cell@19609014561426087287662","content":"C# has support for output and reference parameters. These allow returning multiple output values from a method, or passing values by reference.","generated_KMF_ID":"19609014561426087287662","feature":["features[21151265101426087287662]"],"interpretation":[]}
]}
,
{"class":"pcm.Product@9275992321426087287662","generated_KMF_ID":"9275992321426087287662","name":"","values":[
{"class":"pcm.Cell@15764986511426087287662","content":"Java requires every method to declare the checked exceptions or superclasses of the checked exceptions that it can throw. Any method can also optionally declare the unchecked exception that it throws. C# has no such syntax.","generated_KMF_ID":"15764986511426087287662","feature":["features[21151265101426087287662]"],"interpretation":[]}
]}
,
{"class":"pcm.Product@1542025741426087287662","generated_KMF_ID":"1542025741426087287662","name":",","values":[
{"class":"pcm.Cell@18173829361426087287662","content":"C# implements properties as part of the language syntax with their optional corresponding  and  accessors, as an alternative for the accessor method used in Java, which is not a language feature but a coding-pattern based on method name conventions.","generated_KMF_ID":"18173829361426087287662","feature":["features[21151265101426087287662]"],"interpretation":[]}
]}
,
{"class":"pcm.Product@16344447791426087287662","generated_KMF_ID":"16344447791426087287662","name":",","values":[
{"class":"pcm.Cell@16500718761426087287662","content":"In C#,  statement blocks or expressions can enable run-time checking for arithmetic overflow.","generated_KMF_ID":"16500718761426087287662","feature":["features[21151265101426087287662]"],"interpretation":[]}
]}
],"features":[
{"class":"pcm.Feature@21151265101426087287662","generated_KMF_ID":"21151265101426087287662","name":"feature, example usage"}
]}
