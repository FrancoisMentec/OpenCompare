paradigm
description
main characteristics
related paradigm(s)
critics
examples
imperative
computation as statements that directly change a program state (datafields)
direct assignments, common data structure, global variable

edsger w. dijkstra, michael a. jackson
c, c++, java, php, python
structured
a style of imperative programming with more logical program structure
structogram, indentation, either no, or limited use of, goto statements
imperative

c, c++, java, python
procedural
derived from structured programming, based on the concept of modular programming or the procedure call
local variable, sequence, selection, iteration, and modularization
structured, imperative

c, c++, lisp, php, python
functional
treats computation as the evaluation of mathematical functions avoiding state and mutable data
lambda calculus, compositionality, formula, recursion, referential transparency, no side effects
declarative

erlang, haskell, lisp, clojure, scala, sml, f#, sequencel, python
event-driven including time driven
program flow is determined mainly by events, such as mouse click or interrupts including timer
main loop, event handlers, asynchronous processes
procedural, dataflow

actionscript
object-oriented
treats datafields as objects manipulated through pre-defined methods only
objects, methods, message passing, information hiding, data abstraction, encapsulation, polymorphism, inheritance, serialization-marshalling

see here and
common lisp, c++, c#, eiffel, java, php, python, ruby, scala
declarative
defines computation logic without defining its detailed control flow
4gl, spreadsheet, report program generator


sql, regular expressions, css, prolog
automata-based programming
treats programs as a model of a finite state machine or any other formal automata
state enumeration, control variable, state changes, isomorphism, state transition table
imperative, event-driven


paradigm
description
main characteristics
related paradigm(s)
critics?
examples
“
"you can know the name of a bird in all the languages of the world, but when you're finished, you'll know absolutely nothing whatever about the bird... so let's look at the bird and see what it's doing-- that's what counts. i learned very early the difference between knowing the name of something and knowing something.
”
 

imperative
procedural
object-oriented



